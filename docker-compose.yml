services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: university_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-university_dwh}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-university123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - university_network
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-university_dwh}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: university_qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-qdrant123}
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - university_network
    healthcheck:
      test: ["CMD-SHELL", "sleep 1"]
      interval: 2s
      timeout: 1s
      retries: 3
      start_period: 30s

  # Database Initialization & Population
  db-init:
    build:
      context: .
      target: db-populate
    container_name: university_db_init
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-university_dwh}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-university123}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-university123}@postgres:5432/${POSTGRES_DB:-university_dwh}
    networks:
      - university_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - init
      - full

  # Vanna AI Training (Run Once)
  vanna-trainer:
    build:
      context: .
      target: vanna-train
    container_name: university_vanna_trainer
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_DB=${POSTGRES_DB:-university_dwh}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-university123}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-university123}@postgres:5432/${POSTGRES_DB:-university_dwh}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-qdrant123}
      - QDRANT_URL=http://qdrant:6333
      - VANNA_MODEL=${VANNA_MODEL:-gemini-2.0-flash-exp}
      - VANNA_COLLECTION_NAME=${VANNA_COLLECTION_NAME:-university_sql_collection}
    volumes:
      - vanna_data:/app/vanna_models
    networks:
      - university_network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    command: ["sh", "-c", "sleep 30 && python src/vanna/training.py"]
    profiles:
      - train
      - full

  # Main Application
  app:
    build:
      context: .
      target: app
    container_name: university_app
    restart: unless-stopped
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_DB=${POSTGRES_DB:-university_dwh}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-university123}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-university123}@postgres:5432/${POSTGRES_DB:-university_dwh}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-qdrant123}
      - QDRANT_URL=http://qdrant:6333
      - VANNA_MODEL=${VANNA_MODEL:-gemini-2.0-flash-exp}
      - VANNA_COLLECTION_NAME=${VANNA_COLLECTION_NAME:-university_sql_collection}
      - UNIVERSITY_NAME=${UNIVERSITY_NAME:-Universitas Indonesia Raya}
      - UNIVERSITY_CODE=${UNIVERSITY_CODE:-UIR}
      - CURRENT_ACADEMIC_YEAR=${CURRENT_ACADEMIC_YEAR:-2024/2025}
    ports:
      - "8000:8000"
    volumes:
      - vanna_data:/app/vanna_models
    networks:
      - university_network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    profiles:
      - app
      - full

  # PgAdmin (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: university_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@university.ac.id}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - university_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - admin

volumes:
  postgres_data:
  qdrant_data:
  pgadmin_data:
  vanna_data:

networks:
  university_network:
    driver: bridge